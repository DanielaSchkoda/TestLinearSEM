// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// estimateMoment
double estimateMoment(NumericVector moment, NumericMatrix X);
RcppExport SEXP _TestLinearSEM_estimateMoment(SEXP momentSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type moment(momentSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(estimateMoment(moment, X));
    return rcpp_result_gen;
END_RCPP
}
// estimateCumulant
double estimateCumulant(NumericVector cumulant, NumericMatrix X);
RcppExport SEXP _TestLinearSEM_estimateCumulant(SEXP cumulantSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type cumulant(cumulantSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(estimateCumulant(cumulant, X));
    return rcpp_result_gen;
END_RCPP
}
// estimateCovBtwMoments
double estimateCovBtwMoments(List moment_1, List moment_2, NumericMatrix X);
RcppExport SEXP _TestLinearSEM_estimateCovBtwMoments(SEXP moment_1SEXP, SEXP moment_2SEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type moment_1(moment_1SEXP);
    Rcpp::traits::input_parameter< List >::type moment_2(moment_2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(estimateCovBtwMoments(moment_1, moment_2, X));
    return rcpp_result_gen;
END_RCPP
}
// estimate_Moments
NumericVector estimate_Moments(Rcpp::List Pi, NumericMatrix X);
RcppExport SEXP _TestLinearSEM_estimate_Moments(SEXP PiSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_Moments(Pi, X));
    return rcpp_result_gen;
END_RCPP
}
// estimate_Covs
NumericMatrix estimate_Covs(List Pi_vectorized, NumericMatrix X);
RcppExport SEXP _TestLinearSEM_estimate_Covs(SEXP Pi_vectorizedSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type Pi_vectorized(Pi_vectorizedSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_Covs(Pi_vectorized, X));
    return rcpp_result_gen;
END_RCPP
}
// random_combs_c
Rcpp::List random_combs_c(int n, int k, int nr);
RcppExport SEXP _TestLinearSEM_random_combs_c(SEXP nSEXP, SEXP kSEXP, SEXP nrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    rcpp_result_gen = Rcpp::wrap(random_combs_c(n, k, nr));
    return rcpp_result_gen;
END_RCPP
}
// permutations
IntegerMatrix permutations(int n);
RcppExport SEXP _TestLinearSEM_permutations(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(permutations(n));
    return rcpp_result_gen;
END_RCPP
}
// estimate_polynomial
double estimate_polynomial(List poly, NumericMatrix L);
RcppExport SEXP _TestLinearSEM_estimate_polynomial(SEXP polySEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type poly(polySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_polynomial(poly, L));
    return rcpp_result_gen;
END_RCPP
}
// H_c
Rcpp::NumericMatrix H_c(NumericMatrix X, IntegerMatrix indices, List polynomials);
RcppExport SEXP _TestLinearSEM_H_c(SEXP XSEXP, SEXP indicesSEXP, SEXP polynomialsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< List >::type polynomials(polynomialsSEXP);
    rcpp_result_gen = Rcpp::wrap(H_c(X, indices, polynomials));
    return rcpp_result_gen;
END_RCPP
}
// G_c
NumericMatrix G_c(NumericMatrix X, int order_kernel, List polynomials);
RcppExport SEXP _TestLinearSEM_G_c(SEXP XSEXP, SEXP order_kernelSEXP, SEXP polynomialsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type order_kernel(order_kernelSEXP);
    Rcpp::traits::input_parameter< List >::type polynomials(polynomialsSEXP);
    rcpp_result_gen = Rcpp::wrap(G_c(X, order_kernel, polynomials));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_TestLinearSEM_estimateMoment", (DL_FUNC) &_TestLinearSEM_estimateMoment, 2},
    {"_TestLinearSEM_estimateCumulant", (DL_FUNC) &_TestLinearSEM_estimateCumulant, 2},
    {"_TestLinearSEM_estimateCovBtwMoments", (DL_FUNC) &_TestLinearSEM_estimateCovBtwMoments, 3},
    {"_TestLinearSEM_estimate_Moments", (DL_FUNC) &_TestLinearSEM_estimate_Moments, 2},
    {"_TestLinearSEM_estimate_Covs", (DL_FUNC) &_TestLinearSEM_estimate_Covs, 2},
    {"_TestLinearSEM_random_combs_c", (DL_FUNC) &_TestLinearSEM_random_combs_c, 3},
    {"_TestLinearSEM_permutations", (DL_FUNC) &_TestLinearSEM_permutations, 1},
    {"_TestLinearSEM_estimate_polynomial", (DL_FUNC) &_TestLinearSEM_estimate_polynomial, 2},
    {"_TestLinearSEM_H_c", (DL_FUNC) &_TestLinearSEM_H_c, 3},
    {"_TestLinearSEM_G_c", (DL_FUNC) &_TestLinearSEM_G_c, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_TestLinearSEM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
